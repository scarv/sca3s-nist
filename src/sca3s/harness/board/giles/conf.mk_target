# Copyright (C) 2018 SCARV project <info@scarv.org>
#
# Use of this source code is restricted per the MIT license, a copy of which 
# can be found at https://opensource.org/licenses/MIT (or should be included 
# as LICENSE.txt within the associated archive or repository).

# =============================================================================

    GCC_PREFIX  = arm-none-eabi-

    GCC_PATHS  += 
    GCC_FLAGS  += -mcpu="cortex-m0" -mthumb -nostartfiles -Wall -std="gnu99" -Os 
    GCC_FLAGS  += -T ${REPO_HOME}/src/sca3s/harness/board/${BOARD}/bsp.ld
    GCC_LIBS   += 

READELF_FLAGS  += --wide --all
OBJCOPY_FLAGS  += --gap-fill="0"

 TARGETS       += ${REPO_HOME}/build/${BOARD}/target.elf
 TARGETS       += ${REPO_HOME}/build/${BOARD}/target.bin 
 TARGETS       += ${REPO_HOME}/build/${BOARD}/target.hex

  TRACES        = $(foreach TRACE, $(shell seq 0 $$(( $${TRACE_COUNT_MINOR} - 1 ))), ${REPO_HOME}/build/${BOARD}/target-$(shell printf '%08X' ${TRACE}).trs)

define parse
  grep 'note:' | sed -e 's|.*note: \#pragma message: ||'
endef

# =============================================================================

${REPO_HOME}/build/${BOARD}/%.o : %.c
	@${GCC_PREFIX}gcc $(patsubst %, -I %, ${INCLUDES}) ${GCC_PATHS} ${GCC_FLAGS} -c -o ${@} ${<} 2>&1 | tee ${REPO_HOME}/build/${BOARD}/${*}.log
${REPO_HOME}/build/${BOARD}/%.o : %.s
	@${GCC_PREFIX}gcc $(patsubst %, -I %, ${INCLUDES}) ${GCC_PATHS} ${GCC_FLAGS} -c -o ${@} ${<} 2>&1 | tee ${REPO_HOME}/build/${BOARD}/${*}.log
${REPO_HOME}/build/${BOARD}/%.o : %.S
	@${GCC_PREFIX}gcc $(patsubst %, -I %, ${INCLUDES}) ${GCC_PATHS} ${GCC_FLAGS} -c -o ${@} ${<} 2>&1 | tee ${REPO_HOME}/build/${BOARD}/${*}.log

${REPO_HOME}/build/${BOARD}/%.elf ${REPO_HOME}/build/${BOARD}/%.map : ${OBJECTS}
	@${GCC_PREFIX}gcc $(patsubst %, -I %, ${INCLUDES}) ${GCC_PATHS} ${GCC_FLAGS} -Wl,-Map="${REPO_HOME}/build/${BOARD}/${*}.map" -o ${REPO_HOME}/build/${BOARD}/${*}.elf ${^} ${GCC_LIBS}
${REPO_HOME}/build/${BOARD}/%.bin                                   : ${REPO_HOME}/build/${BOARD}/%.elf
	@${GCC_PREFIX}objcopy ${OBJCOPY_FLAGS} --output-target="binary" ${<} ${@}
${REPO_HOME}/build/${BOARD}/%.hex                                   : ${REPO_HOME}/build/${BOARD}/%.elf
	@${GCC_PREFIX}objcopy ${OBJCOPY_FLAGS} --output-target="ihex"   ${<} ${@}

${REPO_HOME}/build/${BOARD}/%.trs                                   : ${TARGETS}
	@GILES --input $(filter %.bin, ${^}) --output ${@}

report   : ${TARGETS}
	@${GCC_PREFIX}readelf ${READELF_FLAGS} $(filter %.elf, ${^})

io       : ${TARGETS}
	@cat ${REPO_HOME}/build/${BOARD}/*.log | $(call parse) | sort | uniq > ${REPO_HOME}/build/${BOARD}/target.io

simulate : ${TARGETS} ${TRACES}

# =============================================================================
